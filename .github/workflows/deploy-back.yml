name: Deploy Spring Boot Backend

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-back:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout del repositorio
    - name: Checkout repository
      uses: actions/checkout@v2

    # 2. Instalar JDK 17 en GitHub Actions
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'microsoft'

    # 3. Instalar Maven en el entorno de GitHub Actions
    - name: Install Maven
      run: sudo apt-get install -y maven

    # 4. Instalar OpenConnect para la conexión a la VPN
    - name: Install OpenConnect
      run: sudo apt-get install -y openconnect

    # 5. Instalar sshpass para conexión SSH no interactiva
    - name: Install sshpass
      run: sudo apt-get install -y sshpass

    # 6. Conectar a la VPN (si es necesario)
    - name: Connect to VPN
      run: |
        echo "${{ secrets.VPN_PASSWORD }}" | sudo openconnect --protocol=gp --user=${{ secrets.VPN_USER }} --passwd-on-stdin ${{ secrets.VPN_HOST }} -b

    # 7. Compilar el proyecto usando Maven
    - name: Build Spring Boot project
      run: mvn clean package -DskipTests

    # 8. Copiar el archivo JAR generado al servidor remoto
    - name: Copy JAR to remote server
      run: |
        sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no target/*.jar ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }}:~/magno/magno/backend/

    # 9. Ejecutar la aplicación Spring Boot en el servidor remoto
    - name: Run Spring Boot app on remote server
      run: |
        sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} '
          # Detener cualquier instancia en ejecución de la aplicación
          pid=$(pgrep -f "java -jar") || true
          if [ -n "$pid" ]; then
            echo "Stopping existing Spring Boot application..."
            kill -9 $pid
          fi

          # Crear la carpeta de logs si no existe
          mkdir -p ~/magno/magno/backend/logs

          # Iniciar la aplicación con las variables de entorno JDBC
          echo "Starting Spring Boot application..."
          nohup env JDBC_DATABASE_URL=${{ secrets.JDBC_DATABASE_URL }} \
                   JDBC_DATABASE_USERNAME=${{ secrets.JDBC_DATABASE_USERNAME }} \
                   JDBC_DATABASE_PASSWORD=${{ secrets.JDBC_DATABASE_PASSWORD }} \
                   java -jar ~/magno/magno/backend/*.jar > ~/magno/magno/backend/logs/app.log 2>&1 &
        '

    # 10. Mostrar las últimas líneas del log para verificar si la aplicación se inició correctamente
    - name: Show last 50 lines of Spring Boot logs
      run: |
        sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} '
          tail -n 50 ~/magno/magno/backend/logs/app.log
        '

    # 11. Mensaje de finalización
    - name: Post Deployment
      run: echo "Spring Boot application deployed successfully"
